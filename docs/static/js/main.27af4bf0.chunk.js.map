{"version":3,"sources":["components/TaskRow/TaskRow.js","components/TaskBanner/TaskBanner.js","components/TaskCreator/TaskCreator.js","components/VisibilityControl/VisibilityControl.js","App.js","reportWebVitals.js","index.js"],"names":["TaskRow","props","task","name","type","checked","done","onChange","toggleTask","TaskBanner","className","userName","TaskCreator","useState","newTaskName","setNewTaskName","value","e","target","onClick","createNewTask","VisibilityControl","isChecked","callback","htmlFor","description","App","setUserName","taskItem","setTaskItem","showCompleted","setShowCompleted","useEffect","data","localStorage","getItem","JSON","parse","setItem","stringify","map","t","taskTableRows","doneValue","filter","taskName","find","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.27af4bf0.chunk.js","sourcesContent":["\r\n\r\nconst TaskRow = (props) => {\r\n    return (\r\n        <>\r\n            <tr key={props.task.name}>\r\n                <td>{props.task.name}</td>\r\n                <input type=\"checkbox\" checked={props.task.done} onChange={() => props.toggleTask(props.task)} />\r\n            </tr>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TaskRow\r\n","\r\nconst TaskBanner = (props) => {\r\n    return (\r\n        <h4 className=\"bg-primary text-white text-center p-4\">{props.userName} Task App</h4>\r\n    )\r\n}\r\n\r\nexport default TaskBanner\r\n","import { useState } from \"react\"\r\n\r\n\r\nconst TaskCreator = (props) => {\r\n\r\n    const [newTaskName, setNewTaskName] = useState(\"\")\r\n    const updateNewTaskValue = (e) => {\r\n        setNewTaskName(e.target.value)\r\n    }\r\n\r\n    const createNewTask = () => {\r\n        props.createNewTask(newTaskName)\r\n        setNewTaskName(\"\")\r\n    }\r\n\r\n    return (\r\n        <div className=\"my-1\">\r\n            <input type=\"text\" className=\"form-control\" value={newTaskName} onChange={updateNewTaskValue} />\r\n            <button onClick={createNewTask} className=\"btn btn-primary mt-1\">Add</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TaskCreator\r\n","\r\nconst VisibilityControl = (props) => {\r\n    return (\r\n        <div className=\"form-check\">\r\n            <input type=\"checkbox\" className=\"form-check-input\" checked={props.isChecked} onChange={e => props.callback(e.target.checked)} />\r\n            <label htmlFor=\"form-check-label\">Show {props.description}</label>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default VisibilityControl\r\n","import { useState, useEffect } from 'react';\n\n\nimport TaskRow from './components/TaskRow/TaskRow';\nimport TaskBanner from \"./components/TaskBanner/TaskBanner\"\nimport TaskCreator from './components/TaskCreator/TaskCreator';\nimport VisibilityControl from './components/VisibilityControl/VisibilityControl';\n\nfunction App() {\n\n  const [userName, setUserName] = useState(\"Samuel\");\n  const [taskItem, setTaskItem] = useState([{\n    name: \"Task one\",\n    done: false,\n  }, {\n    name: \"Task two\",\n    done: false,\n  }, {\n    name: \"Task three\",\n    done: true,\n  },])\n  const [showCompleted, setShowCompleted] = useState(true)\n\n  useEffect(() => {\n    let data = localStorage.getItem(\"task\");\n    if (data != null) {\n      setTaskItem(JSON.parse(data))\n    } else {\n      setUserName(\"Samuel Example\")\n      setTaskItem([{\n        name: \"Task one  example\",\n        done: false,\n      }, {\n        name: \"Task two example\",\n        done: false,\n      }, {\n        name: \"Task three example\",\n        done: true,\n      },])\n      setShowCompleted(true)\n    }\n  }, [])\n\n  useEffect(()=> {\n    localStorage.setItem(\"task\" , JSON.stringify(taskItem))\n  }, [taskItem])\n\n  const createNewTask = (taskName) => {\n    if (!taskItem.find(t => t.name === taskName)) {\n      setTaskItem([...taskItem, { name: taskName, done: false }])\n    }\n  }\n\n  const toggleTask = (task) => {\n    setTaskItem(taskItem.map((t) => (\n      t.name === task.name ? { ...t, done: !task.done } : t\n    )))\n  }\n\n  const taskTableRows = (doneValue) =>\n    taskItem\n      .filter(task => task.done === doneValue)\n      .map((task) => (\n        <TaskRow task={task} key={task.name} toggleTask={toggleTask} />\n      ))\n\n\n  return (\n    <div>\n      <TaskBanner userName={userName} taskItem={taskItem} />\n      <TaskCreator createNewTask={createNewTask} />\n\n      <table className=\"table table-striped table-bordered\">\n        <thead>\n          <th>Description</th>\n          <th>Done</th>\n        </thead>\n        <tbody>\n          {taskTableRows(false)}\n        </tbody>\n      </table>\n\n      <div className=\"bg-secondary-text-white text-center p-2\">\n        <VisibilityControl description=\"completed tasks\" isChecked={showCompleted} callback={checked => setShowCompleted(checked)} />\n      </div>\n\n      {\n        showCompleted && (\n          <table className=\"table table-striped table-bordered\">\n            <thead>\n              <tr>\n                <th>Description</th>\n                <th>Done</th>\n              </tr>\n            </thead>\n            <tbody>\n              {taskTableRows(true)}\n            </tbody>\n          </table>\n        )\n      }\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}